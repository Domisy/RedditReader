<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:redditjson="services.redditjson.*"
		actionBarVisible="{redditFeedModel.isVisible}" destructionPolicy="never"
		initialize="initializeHandler(event)" tabBarVisible="true"
		overlayControls.landscape="true" tabBarVisible.landscape="false"
		overlayControls.portrait="true">
	
	
	
	<fx:Script>
		<![CDATA[
			import com.adobe.fiber.core.model_public;
			
			import model.RedditFeedModel;
			
			import mx.events.FlexEvent;
			import mx.messaging.management.ObjectInstance;
			import mx.rpc.events.ResultEvent;
			
			import qnx.events.QNXApplicationEvent;
			import qnx.system.QNXApplication;
			
			import spark.managers.PersistenceManager;
			
			import utils.DateUtil;
			
			import valueObjects.Item;
			import valueObjects.RedditUserInfoResponse;
			
			import views.RedditFeed;
			
			[Bindable] private var redditFeedModel : RedditFeedModel = RedditFeedModel.getInstance();
			//[Bindable] public var userData:User = new User();
			
			[Bindable] public var errorReturn:String;
			[Bindable] public var modhash:String;
			[Bindable] public var cookie:String;
			[Bindable] public var loginBusy:Boolean = false;
			[Bindable] public var labelColor:String = '#000000';
			
			
			//VARIABLES
			public var defUrl:String = new String("");
			private var modelInstance : RedditFeedModel;
			private var snapshot:Boolean= false;
			private var alrtTimer:Timer;

			
			
			public function loginBusyOn():void
			{
				loginBusy = true;
				//loginButton.visible = false;
			}
			
			public function loginBusyOff():void
			{
				loginBusy = false;
				//loginButton.visible = true;
			}
			
			
			
			public function refreshRSS(event:Event):void
			{ 
				redditFeedModel.redditFeed.refreshList();
			}
			
			protected function initializeHandler(event:FlexEvent):void
			{
				CONFIG::device {
					QNXApplication.qnxApplication.addEventListener(QNXApplicationEvent.SWIPE_DOWN, onSwipeDown);
					NativeApplication.nativeApplication.addEventListener(Event.EXITING, applicationExitHandler);
				}
				this.addEventListener("voteButtonClicked", onSwipeDown);
			}
			
			protected function applicationExitHandler(event:Event):void
			{
				var saveManager:PersistenceManager = new PersistenceManager();
				saveManager.setProperty("dictionary", redditFeedModel.voteDictionary);  
			}
			
			//event:Event
			public function onSwipeDown(event:Event):void
			{
				if (redditFeedModel.isVisible == true)
				{
					redditFeedModel.isVisible = false;
					if (snapshot == true) {
						alrtTimer = new Timer(200, 1);
						alrtTimer.reset();
						alrtTimer.start();

						alrtTimer.addEventListener(TimerEvent.TIMER_COMPLETE, timerComplete);
						
					}
				}
				
				else { 
					if (redditFeedModel.detailsView) {
						if (redditFeedModel.detailsView.isActive == true) {redditFeedModel.detailsView.webView.takeSnapshot(); snapshot=true;}
					}
					redditFeedModel.isVisible = true;
					splitViewNavigator.addEventListener(MouseEvent.MOUSE_DOWN, closeAction);
				}
				
			}
			
			
			public function closeAction(event:Event):void {
				if (snapshot == true) {redditFeedModel.detailsView.webView.removeSnapshot(); snapshot=false;}
				redditFeedModel.isVisible = false;
				splitViewNavigator.removeEventListener(MouseEvent.MOUSE_DOWN, closeAction);
			}
			
			public function timerComplete(event:Event):void {
				redditFeedModel.detailsView.webView.removeSnapshot(); 
				snapshot=false;
			}
		]]>
	</fx:Script>
	

	
	<s:states>
		<s:State name="portrait"/>
		<s:State name="landscape"/>
	</s:states>
	<fx:Declarations>
		<s:CallResponder id="redditJsonResult"/>
		<redditjson:RedditJson id="redditJson"/>
	</fx:Declarations>
	
	
	<s:actionContent>
		<s:Button includeIn="landscape" x="5" width="95" height="90"
				  click="navigator.pushView(ProfileView)"
				  icon="assets/gear-icon.png"/>
		<s:Button includeIn="portrait" x="91" width="95" height="90" label="Button"
				  click="navigator.pushView(ProfileView)"
				  icon="assets/gear-icon.png"/>
	</s:actionContent>
	<s:navigationContent>
		<s:Image width="43" height="43" source="assets/reddit Head.png"/>
		
	</s:navigationContent>
	<s:titleContent>
		<s:ViewNavigator firstView="views.LoginView" includeIn="landscape, portrait" width="864" height="100"/>
	</s:titleContent>
	
		
	
	
	<s:SplitViewNavigator id="splitViewNavigator" width="100%" height="100%"
						  autoHideFirstViewNavigator="true"
						  enabled="{redditFeedModel.splitViewEnabled}">
		<s:ViewNavigator id="redditListNav" firstView="views.SubredditList" firstViewData="{redditFeedModel}" width="300" height="100%"/>
		<s:ViewNavigator id="redditFeedNav" width="100%" height="100%" firstView="views.RedditFeed"
						 firstViewData="{redditFeedModel}">
			
			
			
			<s:actionContent.landscape>
				<fx:Array>
					<s:Button id="refreshButtonlLandscape" icon="@Embed('assets/refresh160.png')" click="refreshRSS(event)" />
				</fx:Array>
			</s:actionContent.landscape>
			
			<s:actionContent>
				<s:Button id="refreshButton" icon="@Embed('assets/refresh160.png')" click="refreshRSS(event)" />
				<s:Button id="navigatorButton" x="56" width="52" height="43"
						  click="splitViewNavigator.showFirstViewNavigatorInPopUp(navigatorButton)"
						  icon="assets/images/searchIconFinal.png"/>
			</s:actionContent>
		</s:ViewNavigator>
	</s:SplitViewNavigator>
	

</s:View>
