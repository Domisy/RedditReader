<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:redditfeedgrabber="services.redditfeedgrabber.*"
		xmlns:redditsearch="services.redditsearch.*"
		xmlns:valueObjects="valueObjects.*"
		xmlns:classes="classes.*"
		destructionPolicy="never"
		initialize="subView_initializeHandler(event)"
		title="Subreddit List">
	
	
	<fx:Script> 
		<![CDATA[
			import com.adobe.fiber.core.model_public;
			import com.adobe.serializers.utility.TypeUtility;
			
			import flash.display3D.IndexBuffer3D;
			import flash.events.KeyboardEvent;
			import flash.sampler.NewObjectSample;
			import flash.sampler.Sample;
			import flash.text.TextFieldAutoSize;
			import flash.text.TextFieldType;
			import flash.ui.Keyboard; 
			
			import model.RedditFeedModel;
			
			import mx.binding.utils.BindingUtils;
			import mx.collections.ArrayCollection;
			import mx.events.CollectionEvent;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.ItemClickEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.components.Application;
			import spark.components.NavigatorContent;
			import spark.components.SplitViewNavigator;
			import spark.components.ViewNavigator;
			import spark.events.IndexChangeEvent;
			import spark.events.TextOperationEvent;
			import spark.events.ViewNavigatorEvent;
			
			import valueObjects.Item;
			
			import views.RedditFeed;
			import views.RedditReaderHomeView;
			
			//BINDABLES
			[Bindable] public var rlink:String;
			[Bindable] public var searchLink:String;
			[Bindable] private var myListDP : ArrayCollection;
			[Bindable] private var mySearchListDP : ArrayCollection;
			
			//VARIABLES
			private var modelInstance : RedditFeedModel;
			private var theJsonResponse : Object;
			private var allItem:Object = 
				{data:
					{title: "All",
					public_description:"",
					url:"/r/all/"}};
			
			
			override public function set data(value:Object) : void
			{
				super.data = value;
				modelInstance = value as RedditFeedModel;
				modelInstance.subredditList = this;
			}
			
			
			
			public function list_clickHandler(event:IndexChangeEvent):void {
				var RSSItem:Object = redditList.dataProvider.getItemAt(event.newIndex);
				rlink = RSSItem.data.url;
				var moddedLink:String = rlink.slice(1, int.MAX_VALUE);		
				var rrhv : RedditReaderHomeView = parentDocument as RedditReaderHomeView;
				if (modelInstance.detailsView && modelInstance.detailsView.navigator && modelInstance.detailsView.navigator.activeView is DetailsView)
				{
					modelInstance.detailsView.navigator.popView();
				}
				modelInstance.currentSub = moddedLink;
				modelInstance.redditFeed.changeSub(moddedLink);
			}

			
			
			public function busyOn():void
			{
				if (subThrobber.visible == false)
				{
					subThrobber.visible = true;
				}
				else {
					null
				}
			}
			
			public function busyOff(event:ResultEvent):void
			{
				if (subThrobber.visible == true)
				{
					subThrobber.visible = false;
				}
				else {
					null
				}
			}
			
			private function hideKeyboard():void 
			{
				stage.focus = null; //hides the keyboard somehow
			}
			
			
			
			public function redditList_creationCompleteHandler(event:FlexEvent):void
			{
				busyOn();
				subRedditJsonService.send();
			}

			
			
			protected function qTextInput_changeHandler(event:TextOperationEvent):void
			{
				if (qTextInput.text == "") {
					errorMessage.visible = false;
					searchList.visible = false;
					searchList.dataProvider.removeAll();
					redditList.visible = true;
					subThrobber.visible = false;
				}
				else {
					null;
				}
			}
			
			
			
			protected function redditSearchList_changeHandler(event:IndexChangeEvent):void
			{
				modelInstance.isSearchResult = true;
				modelInstance.isPic = false;
				modelInstance.currentlySelectedRSSItem = event.target.selectedItem;
				//modelInstance.currentlySelectedRSSItem = redditSearchList.dataProvider.getItemAt(event.newIndex) as Item;
				modelInstance.redditFeed.navigator.pushView(DetailsView, modelInstance);
			}
			
			
			
			protected function fixEntityReferences(event:CollectionEvent):void
			{
				searchList.labelFunction = replaceEntity;
				function replaceEntity(item:Item):String
				{
					var p1:RegExp = /(-)/ig; //perhaps add more here later
					var thisString:String = item.title.replace(p1, "-");
					trace(thisString);
					return thisString;
				}
			}
			
			
			
			protected function subView_initializeHandler(event:FlexEvent):void
			{
				qTextInput.addEventListener(KeyboardEvent.KEY_DOWN, onKeyDown);
			}
			
			
			
			private function onKeyDown(e:KeyboardEvent):void
			{
				if (e.keyCode == Keyboard.ENTER)
				{
					busyOn();
					hideKeyboard();
					searchList.visible = true;
					redditList.visible = false;
					var variables:URLVariables = new URLVariables();
					variables.q = qTextInput.text;
					searchRedditJsonService.send(variables);
				}
			}
			
			private function httpservice1_resultHandler(event:ResultEvent):void {
				busyOff(null);
				theJsonResponse = JSON.parse(event.result as String);
				var tempDP:ArrayCollection = new ArrayCollection(theJsonResponse.data.children);
				tempDP.addItemAt(allItem, 0);
				myListDP = tempDP;
				redditList.selectedIndex = 0;
			}
			
			private function search_resultHandler(event:ResultEvent):void {
				errorMessage.visible = false;
				busyOff(null);
				theJsonResponse = JSON.parse(event.result as String);
				var tempDP:ArrayCollection = new ArrayCollection(theJsonResponse.data.children);
				mySearchListDP = tempDP;
				if (searchList.dataProvider.length == 0) {
					errorMessage.visible = true;
				}
			}
	
			
			public function userLoaded():void 
			{
				busyOn();
				var cookieHeader:URLRequestHeader = new URLRequestHeader("Cookie", "reddit_session=" + modelInstance.cookie); 
				userSubRedditJsonService.headers = [cookieHeader];
				userSubRedditJsonService.send();
			}
		]]>
	</fx:Script>
	
		
	
	<fx:Declarations>
		<s:HTTPService id="subRedditJsonService"
					   result="httpservice1_resultHandler(event)"
					   url="http://www.reddit.com/reddits/popular.json"/>
		<s:HTTPService id="userSubRedditJsonService"
					   result="httpservice1_resultHandler(event)"
					   url="http://www.reddit.com/reddits/mine/subscriber.json"/>
		<s:HTTPService id="searchRedditJsonService"
					   result="search_resultHandler(event)"
					   url="http://www.reddit.com/search.json"/>
	</fx:Declarations>
	
	
	<s:titleContent>
		<s:TextInput id="qTextInput" width="100%" height="85%"
					 fontSize="19" change="qTextInput_changeHandler(event)"
					 prompt="Search Reddit..."/>
	</s:titleContent>
	
	
	
	<s:List id="redditList" x="0" y="0" width="100%" height="100%" selectionColor="0xFF7F2A"
			creationComplete="redditList_creationCompleteHandler(event)" itemRenderer="renderers.SubListRenderer"
			change="{list_clickHandler(event)}" dataProvider="{myListDP}">
	</s:List>
	
	
	<s:List id="searchList" visible="false" width="100%" height="100%" selectionColor="0xFF7F2A"
			dataProvider="{mySearchListDP}" itemRenderer="renderers.SubListRenderer" 
			change="redditSearchList_changeHandler(event)">
	</s:List>
	<s:Label id="errorMessage" fontSize="20" horizontalCenter="0" verticalCenter="-6" textAlign="center" 
			 text="nothing was found" color="0xFF4500" visible="false"/>
	
	
	<s:BusyIndicator id="subThrobber" visible="true" verticalCenter="-6" x="130"  width="40" height="40"/>
	
</s:View>
